{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","api/index.js","Player/VideoJS.js","RawPlayer/Player.js","Player/Player.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","Row","title","movies","isLargeRow","className","map","movie","href","id","key","onClick","src","medium_cover_image","background_image_original","alt","style","padding","API_KEY","Banner","backgroundSize","backgroundImage","backgroundPosition","name","original_name","target","yt_trailer_id","synopsis","Nav","useState","show","handleshow","useEffect","window","addEventListener","scrollY","removeEventListener","hidden","type","Catch","promise","a","p","YTS_HOST","getAllMovies","fetch","json","getMovieDetails","imdbId","streamURI","location","protocol","host","getStreamConfig","hash","getPlaybackURL","streamId","file","getMovieSuggestions","VideoJS","props","videoRef","React","useRef","playerRef","options","onReady","current","autoplay","sources","videoElement","player","videojs","log","dispose","data-vjs-player","ref","Player","streamConfig","videoJsOptions","controls","responsive","fluid","poster","stream_id","files","find","endsWith","suggestions","setSuggestions","then","minHeight","minWidth","display","justifyContent","alignItems","maxWidth","width","height","on","marginTop","color","description_full","yt_trailer_code","data","setMovie","setStreamConfig","params","useSearchParams","logic","get","movieError","res","alert","lowestResStream","torrents","torrent","quality","parseInt","slice","sort","b","console","Home","state","setState","smartMovies","response","genres","Set","flat","moviesByGenres","genre","filter","includes","undefined","row","length","TestWatch","WebTorrent","add","appendTo","App","route","useLocation","pathname","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.185720e2.chunk.js","sourcesContent":["import axios from 'axios';\n\n/** base url to make request to the themoviedatabase */\n\nconst instance = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3'\n});\n\n// instance.get('/foo-bar');\n// https://api.themoviedb.org/3/foo-bar\n\nexport default instance;\n","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({ title, movies, isLargeRow }) {\n  // const [movies, setMovies] = useState([]);\n  // const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // useEffect(() => {\n  // }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0,\n    }\n  }\n\n  const handleClick = (movie) => {\n    // console.table(movie?.title)\n    // if (trailerUrl) {\n    //   setTrailerUrl('')\n    // } else {\n    //   movieTrailer(movie?.title || \"\")\n    //     .then(url => {\n    //       const urlParams = new URLSearchParams(new URL(url).search);\n    //       setTrailerUrl(urlParams.get('v'));\n    //     }).catch((error) => console.log(error));\n    // }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map(movie => {\n          return <a href={\"/watch?id=\" + movie.id}><img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${isLargeRow ? movie.medium_cover_image : movie.background_image_original}`}\n            alt={movie.title} /></a>\n        })}\n      </div>\n      <div style={{ padding: \"40px\" }}>\n        {/*{trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}*/}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = 'Your TMDB Api_Key';\n\nconst requests = {\n\tfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n};\n\nexport default requests;\n","import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport requests from './requests';\nimport \"./Banner.css\"\n\nfunction Banner({movie}) {\n  // const [movie, setMovie] = useState([]);\n\n\n  // console.log(movie)\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n        \"${movie?.background_image_original}\"\n        )`,\n        backgroundPosition: \"center center\"\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div style={{padding: \"1rem 0\"}} className=\"banner_buttons\">\n          <a href={\"/watch?id=\" + movie?.id}><button className=\"banner_button\">Stream</button></a>\n          <a target={\"_blank\"} href={\"https://youtube.com/watch?v=\" + movie?.yt_trailer_id}><button className=\"banner_button\">Trailer</button></a>\n        </div>\n        <h1 className=\"banner_description\">{movie?.synopsis}</h1>\n      </div>\n\n      <div className=\"banner--fadeBottom\" />\n    </header>\n\n  )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react';\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleshow] = useState(false)\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleshow(true)\n      } else handleshow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\")\n    }\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://docs.kabeercloud.tk/c/synced/6273fa5e26b3a---b862fb2e08f8e07c0f22f0ab9befb163.png\"\n        alt=\"Netflix Logo\"\n      />\n      <div hidden={true}>\n        <form>\n          <input type={\"text\"}/>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default Nav\n","const prod = true;\nexport const Catch = async (promise) => {\n    try {\n        const p = await promise;\n        return [null, p]\n    } catch (e) {\n        return [e, null];\n    }\n}\nconst YTS_HOST = \"https://mirror-yts-mx.kabeercloud.tk\" || \"https://yts.mx\"\nexport const getAllMovies= async () => (await fetch(YTS_HOST + \"/api/v2/list_movies.json\")).json();\nexport const getMovieDetails = async (imdbId)=> (await fetch(YTS_HOST + \"/api/v2/movie_details.json?movie_id=\" + imdbId)).json();\nexport const streamURI =  prod ? window.location.protocol + \"//\" + window.location.host : \"http://localhost:3000\";\nexport const getStreamConfig = async (hash) => (await fetch(`${streamURI}/stream/v1/details?hash=${hash}`)).json();\nexport const getPlaybackURL = (streamId, file) => `${streamURI}/stream/v1/play?stream_id=${streamId}&file=${file}`;\nexport const getMovieSuggestions = async (id) => (await fetch(YTS_HOST + `/api/v2/movie_suggestions.json?movie_id=${id}`)).json();","import React from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\n\nexport const VideoJS = (props) => {\n    const videoRef = React.useRef(null);\n    const playerRef = React.useRef(null);\n    const {options, onReady} = props;\n\n    React.useEffect(() => {\n\n        // Make sure Video.js player is only initialized once\n        if (!playerRef.current) {\n            const videoElement = videoRef.current;\n\n            if (!videoElement) return;\n\n            const player = playerRef.current = videojs(videoElement, options, () => {\n                player.log('player is ready');\n                onReady && onReady(player);\n            });\n\n            // You can update player in the `else` block here, for example:\n        } else {\n            playerRef.current.autoplay(options.autoplay);\n            playerRef.current.src(options.sources);\n        }\n    }, [options, videoRef]);\n\n    // Dispose the Video.js player when the functional component unmounts\n    React.useEffect(() => {\n        const player = playerRef.current;\n\n        return () => {\n            if (player) {\n                player.dispose();\n                playerRef.current = null;\n            }\n        };\n    }, [playerRef]);\n\n    return (\n        <div data-vjs-player>\n            <video ref={videoRef} className='video-js vjs-big-play-centered' />\n        </div>\n    );\n}\n\nexport default VideoJS;","import React, {useEffect, useState} from \"react\"\nimport VideoJS from \"../Player/VideoJS\";\nimport \"../Banner.css\";\nimport {getMovieDetails, getMovieSuggestions, getPlaybackURL, streamURI} from \"../api\";\nimport {useSearchParams} from \"react-router-dom\";\nimport Row from \"../Row\";\nconst endsWith = (ext, str) => str.slice(0, -ext.length) === ext;\nconst Player = ({movie, streamConfig}) => {\n    const playerRef = React.useRef(null);\n    // movie.torrents = movie.torrents.map(torrent => ({...torrent, magnet: `magnet:?xt=urn:btih:${torrent.hash}&dn=${encodeURIComponent(movie.title)}`}))\n    // const magnetURLS = movie.torrents.map(t =orrent)`magnet:?xt=urn:btih:${movie.}&dn=${encodeURIComponent(movie.title)}`\n    // console.log(getPlaybackURL(streamConfig.stream_id,streamConfig.files[0].hash))\n    const videoJsOptions = {\n        autoplay: false,\n        controls: true,\n        responsive: true,\n        fluid: true,\n        poster: movie.background_image_original,\n        sources: [{src: getPlaybackURL(streamConfig.stream_id, streamConfig.files.find(file => file.name.endsWith(\".mp4\")).hash), type: \"video/mp4\"}]\n        // Souurces would come from a function which renders all source urls\n        // sources: movie.torrents.map(torrent => ({src: streamURI + '/stream/v1/play?stream_id='+ torrent.hash + \"&file=\" + , type: \"video/mp4\"}))\n    };\n\n    const handlePlayerReady = (player) => {\n        playerRef.current = player;\n\n        // You can handle player events here, for example:\n        player.on('waiting', () => {\n            player.log('player is waiting');\n        });\n\n        player.on('dispose', () => {\n            player.log('player will dispose');\n        });\n    };\n    const [suggestions, setSuggestions] = useState();\n    useEffect(() => {\n        getMovieSuggestions(movie.id).then(setSuggestions);\n    }, [])\n\n    return (\n        <div style={{\n\n            minHeight: \"100vh\",\n            minWidth: \"100vw\",\n        }}>\n            <div\n                style={{\n                    display: \"flex\", justifyContent: \"center\", alignItems: \"center\",\n                }}>\n                <div style={{\n                    padding: \"5rem 1rem\",\n                    minWidth: \"60vw\", minHeight: \"auto\", maxWidth: \"40rem\", width: \"100%\", height: \"auto\"\n                }}>\n                    <VideoJS options={videoJsOptions} onReady={handlePlayerReady}/>\n                    <div style={{\n                        marginTop: \"1rem\"\n                    }}>\n                        <h1 style={{\n                            color: \"white\"\n                        }}>{movie.title}</h1>\n                        <p style={{\n                            color: \"whitesmoke\"\n                        }}>{movie.description_full}</p>\n                        <a href={`https://www.youtube.com/watch?v=${movie.yt_trailer_code}`} target={\"_blank\"}>Watch\n                            Trailer</a>\n                    </div>\n                </div>\n                <br/>\n                {/*<video id=\"video_1\" style={{*/}\n                {/*    padding: \"0 1rem\",*/}\n                {/*    minWidth: \"70vw\", minHeight: \"auto\", width: \"100%\", height: \"auto\"*/}\n                {/*}} className=\"video-js vjs-default-skin\" controls preload=\"auto\" width=\"640\" height=\"268\">*/}\n                {/*    <source src=\"http://localhost:3000/\" type=\"video/mp4\" label=\"720P\"/>*/}\n                {/*    <source src=\"http://localhost:3000/\" type=\"video/mp4\" label=\"480P\" selected=\"true\"/>*/}\n                {/*    <source src=\"http://localhost:3000/\" type=\"video/mp4\" label=\"360P\"/>*/}\n                {/*</video>*/}\n            </div>\n            {suggestions ? <div style={{\n                width: \"100vw\"\n            }}><Row title={\"You might like\"} isLargeRow={true} movies={suggestions.data.movies}/></div> : null}\n        </div>\n    )\n}\nexport default Player;","import React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport {useSearchParams} from \"react-router-dom\";\nimport {Catch, getMovieDetails, getStreamConfig, streamURI} from \"../api\";\nimport RawPlayer from \"../RawPlayer/Player\";\n\nexport const Player = () => {\n    const [movie, setMovie] = useState();\n    const [streamConfig, setStreamConfig] = useState();\n    const params = useSearchParams()[0];\n    const logic = async () => {\n        const [movieError, res] = await Catch(getMovieDetails(params.get(\"id\")));\n        if (movieError) return alert(\"Error Fetching Movie\");\n        setMovie(res);\n        // console.log(res)\n        // const torrents = res.torrents.map(torrent => ({src: streamURI + '/stream/v1/play?stream_id='+ torrent.hash + \"&file=\" + , type: \"video/mp4\"}))\n        // const lowestQuality = (res.data.movie.torrents.map(torrent => parseInt(torrent.quality.slice(0, -1))).sort((a, b) => a - b)[0] + \"p\")\n        // console.log(lowestQuality)\n        const lowestResStream = res.data.movie.torrents.find(torrent => torrent.quality === (res.data.movie.torrents.map(torrent => parseInt(torrent.quality.slice(0, -1))).sort((a, b) => a - b)[0] + \"p\"));\n        getStreamConfig(lowestResStream.hash).then(setStreamConfig);\n        console.log(res.data.movie)\n    }\n    useEffect(() => {\n        logic();\n    }, []);\n    return params.get(\"id\") ? movie && streamConfig ? <RawPlayer movie={movie.data.movie} streamConfig={streamConfig}/> : \"Loading\" : \"ID IS REQUIRED\"\n\n}\nexport default Player;","import React, {useEffect, useState} from \"react\";\nimport {getAllMovies} from \"./api\";\nimport {BrowserRouter as Router, Route, Routes as Switch} from \"react-router-dom\";\nimport Nav from \"./Nav\";\nimport Banner from \"./Banner\";\nimport Row from \"./Row\";\n\nconst Home = () => {\n    const [state, setState] = useState();\n    const smartMovies = async (response) => {\n        const movies = response.data.movies;\n        const genres = [...new Set(movies.map(movie => movie.genres).flat())];\n        const moviesByGenres = genres.map(genre => ({\n            genre,\n            movies: movies.filter(movie => movie.genres.includes(genre))\n        }))//.filter(row => row.movies.length >= 5);\n        setState(moviesByGenres);\n        console.log(moviesByGenres)\n    }\n    useEffect(() => {\n        (getAllMovies()).then(smartMovies);\n    }, []);\n    return (<div>\n            <Banner movie={state ? state[0].movies[0] : undefined}/>\n            <div style={{marginTop: \"2rem\"}}>\n                {state ? state.map(row => <Row title={row.genre} isLargeRow={row.movies.length >= 5}\n                                               movies={row.movies}/>) : <></>}\n            </div>\n        </div>\n    );\n}\nexport default Home","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\nimport {getAllMovies} from \"./api\";\nimport {\n    BrowserRouter as Router, Route, Routes, useLocation\n} from \"react-router-dom\"\nimport Player from \"./Player/Player\";\nimport Home from \"./Home\";\nimport WebTorrent from \"webtorrent\";\n\n\nconst TestWatch = () => {\n    const [state, setState] = useState();\n    useEffect(() => {\n        var client = new WebTorrent()\n\n        var torrentId = '259388538FA3C1872D971486F3421D27A557B026'\n\n        client.add(torrentId, function (torrent) {\n            // Torrents can contain many files. Let's use the .mp4 file\n            var file = torrent.files.find(function (file) {\n                return file.name.endsWith('.mp4')\n            })\n\n            // Display the file by adding it to the DOM. Supports video, audio, image, etc. files\n            file.appendTo('body')\n        })\n    }, [])\n    return <div>Kabeer</div>\n}\nfunction App() {\n    const route = useLocation().pathname;\n    return (\n        <div className=\"app\">\n                <Nav/>\n                {/*<Switch>*/}\n                {/*<Routes>*/}\n                {/*<Route exact path={\"*\"}>*/}\n                {/*    Hello*/}\n                {/*</Route>*/}\n                {route === \"/\" && <Home/>}\n                {route === \"/watch\" && <Player/>}\n            {route ===\"/test-watch\" && <div><TestWatch/></div>}\n\n                {/*<Route exact path=\"/\" element={Home}/>*/}\n                {/*<Route exact path=\"/watch\" element={Player}/>*/}\n                {/*</Routes>*/}\n                {/*</Switch>*/}\n                {/*<Row title=\"Trending\" fetchUrl={requests.fetchTrending} />*/}\n                {/*<Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />*/}\n                {/*<Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />*/}\n                {/*<Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />*/}\n                {/*<Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />*/}\n                {/*<Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />*/}\n                {/*<Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />*/}\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Router>\n        <App />\n    </Router>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}